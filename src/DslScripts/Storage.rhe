Module Common
{
	Entity Storage
	{
		ShortString UserName;
		ShortString StorageKey { Required; }
		LongString Value { Required; }
		
		UniqueMultiple 'UserName StorageKey';		
	}
	
	Action SaveStorageItem '(prms, repository, userInfo) => 
	{
		var item = repository.Common.Storage.Query().FirstOrDefault(x => x.StorageKey == prms.Key && x.UserName == userInfo.UserName);
		if (item != null)
		{
			item.Value = prms.Value;
			repository.Common.Storage.Update(item);
		}
		else
		{
			repository.Common.Storage.Insert(new Common.Storage { UserName = userInfo.UserName, StorageKey = prms.Key, Value = prms.Value});
		}
	}'
	{
		ShortString Key;
		LongString Value;
	}

	Computed GetStorage 'repository => {
		var userStorage = repository.Common.Storage.Query()
			.Where(x => x.UserName == _executionContext.UserInfo.UserName);
		var commonStorage = repository.Common.Storage.Query()
			.Where(x => x.UserName == null);
			
		return userStorage.Concat(commonStorage.Where(c => !userStorage.Any(u => u.StorageKey == c.StorageKey)))
			.Select(x => new Common.GetStorage { Key = x.StorageKey,  Value = x.Value })
			.ToArray();
	}'
	{
			ShortString Key;
			LongString Value;
	}
}